// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Namecheap
{
    /// <summary>
    /// Follow Namecheap domain records guide to get detailed information about
    /// each argument and usage examples.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Namecheap = Pulumi.Namecheap;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_domain_com = new Namecheap.DomainRecords("my-domain-com", new()
    ///     {
    ///         Domain = "my-domain.com",
    ///         EmailType = "NONE",
    ///         Records = new[]
    ///         {
    ///             new Namecheap.Inputs.DomainRecordsRecordArgs
    ///             {
    ///                 Hostname = "blog",
    ///                 Type = "A",
    ///                 Address = "10.11.12.13",
    ///             },
    ///             new Namecheap.Inputs.DomainRecordsRecordArgs
    ///             {
    ///                 Hostname = "@",
    ///                 Type = "ALIAS",
    ///                 Address = "www.testdomain.com",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var my_domain2_com = new Namecheap.DomainRecords("my-domain2-com", new()
    ///     {
    ///         Domain = "my-domain2.com",
    ///         Mode = "OVERWRITE",
    ///         Nameservers = new[]
    ///         {
    ///             "ns1.some-domain.com",
    ///             "ns2.some-domain.com",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Domain records can be imported using by domain name, e.g.,
    /// 
    /// terraform
    /// 
    /// ```sh
    /// $ pulumi import namecheap:index/domainRecords:DomainRecords main example.com
    /// ```
    /// </summary>
    [NamecheapResourceType("namecheap:index/domainRecords:DomainRecords")]
    public partial class DomainRecords : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Purchased available domain name on your account
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// Possible values: NONE, FWD, MXE, MX, OX, GMAIL. Conflicts with `nameservers`
        /// </summary>
        [Output("emailType")]
        public Output<string?> EmailType { get; private set; } = null!;

        /// <summary>
        /// Possible values: `MERGE` (default), `OVERWRITE` - removes all manually set records &amp; sets only ones that were specified in TF config
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// List of nameservers. Conflicts with `email_type` and `record`
        /// 
        /// &lt;a id="nestedblock--record"&gt;&lt;/a&gt;
        /// </summary>
        [Output("nameservers")]
        public Output<ImmutableArray<string>> Nameservers { get; private set; } = null!;

        /// <summary>
        /// (see below for nested schema) Might contain one or more `record`
        /// records. Conflicts with `nameservers`
        /// </summary>
        [Output("records")]
        public Output<ImmutableArray<Outputs.DomainRecordsRecord>> Records { get; private set; } = null!;


        /// <summary>
        /// Create a DomainRecords resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainRecords(string name, DomainRecordsArgs args, CustomResourceOptions? options = null)
            : base("namecheap:index/domainRecords:DomainRecords", name, args ?? new DomainRecordsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainRecords(string name, Input<string> id, DomainRecordsState? state = null, CustomResourceOptions? options = null)
            : base("namecheap:index/domainRecords:DomainRecords", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainRecords resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainRecords Get(string name, Input<string> id, DomainRecordsState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainRecords(name, id, state, options);
        }
    }

    public sealed class DomainRecordsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Purchased available domain name on your account
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// Possible values: NONE, FWD, MXE, MX, OX, GMAIL. Conflicts with `nameservers`
        /// </summary>
        [Input("emailType")]
        public Input<string>? EmailType { get; set; }

        /// <summary>
        /// Possible values: `MERGE` (default), `OVERWRITE` - removes all manually set records &amp; sets only ones that were specified in TF config
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        [Input("nameservers")]
        private InputList<string>? _nameservers;

        /// <summary>
        /// List of nameservers. Conflicts with `email_type` and `record`
        /// 
        /// &lt;a id="nestedblock--record"&gt;&lt;/a&gt;
        /// </summary>
        public InputList<string> Nameservers
        {
            get => _nameservers ?? (_nameservers = new InputList<string>());
            set => _nameservers = value;
        }

        [Input("records")]
        private InputList<Inputs.DomainRecordsRecordArgs>? _records;

        /// <summary>
        /// (see below for nested schema) Might contain one or more `record`
        /// records. Conflicts with `nameservers`
        /// </summary>
        public InputList<Inputs.DomainRecordsRecordArgs> Records
        {
            get => _records ?? (_records = new InputList<Inputs.DomainRecordsRecordArgs>());
            set => _records = value;
        }

        public DomainRecordsArgs()
        {
        }
        public static new DomainRecordsArgs Empty => new DomainRecordsArgs();
    }

    public sealed class DomainRecordsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Purchased available domain name on your account
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Possible values: NONE, FWD, MXE, MX, OX, GMAIL. Conflicts with `nameservers`
        /// </summary>
        [Input("emailType")]
        public Input<string>? EmailType { get; set; }

        /// <summary>
        /// Possible values: `MERGE` (default), `OVERWRITE` - removes all manually set records &amp; sets only ones that were specified in TF config
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        [Input("nameservers")]
        private InputList<string>? _nameservers;

        /// <summary>
        /// List of nameservers. Conflicts with `email_type` and `record`
        /// 
        /// &lt;a id="nestedblock--record"&gt;&lt;/a&gt;
        /// </summary>
        public InputList<string> Nameservers
        {
            get => _nameservers ?? (_nameservers = new InputList<string>());
            set => _nameservers = value;
        }

        [Input("records")]
        private InputList<Inputs.DomainRecordsRecordGetArgs>? _records;

        /// <summary>
        /// (see below for nested schema) Might contain one or more `record`
        /// records. Conflicts with `nameservers`
        /// </summary>
        public InputList<Inputs.DomainRecordsRecordGetArgs> Records
        {
            get => _records ?? (_records = new InputList<Inputs.DomainRecordsRecordGetArgs>());
            set => _records = value;
        }

        public DomainRecordsState()
        {
        }
        public static new DomainRecordsState Empty => new DomainRecordsState();
    }
}
